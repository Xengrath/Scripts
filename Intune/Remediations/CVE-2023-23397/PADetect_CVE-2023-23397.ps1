<#
.SYNOPSIS
	This script is used to detect if Microsoft 365 Apps for Enterprise is running latest Security Updates
.DESCRIPTION
	This script is used to detect if Microsoft 365 Apps for Enterprise is running the 14-MAR-2023 Security Updates,
    It is intended to be run as a Proactive Remediation from Microsoft Intune
.NOTES
	Author:         Timothy Ransom
    Version:        1.0.0.0
    Version Date:   19-MAR-2023

    1.0.0.0 - (19-MAR-2023) - Script Created

    This script is a modified version of the following script:
    https://gist.github.com/nicolonsky/b04dd77129577f782178c0c049344101

    This script additionally sets the updatetargetversion under the following Registry Key to the mapped version:
    HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\office\16.0\common\officeupdate
#>

##*===============================================
##* VARIABLE DECLARATION
##*===============================================

# Define target version numbers for each update channel
$targetVersions = @{
    'CurrentChannel'                        = [System.Version]::Parse('16.0.16130.20306')
    'MonthlyEnterpriseChannel1'             = [System.Version]::Parse('16.0.16026.20238')
    'MonthlyEnterpriseChannel2'             = [System.Version]::Parse('16.0.15928.20298')
    'Semi-AnnualEnterpriseChannel(Preview)' = [System.Version]::Parse('16.0.16130.20306')
    'Semi-AnnualEnterpriseChannel1'         = [System.Version]::Parse('16.0.15601.20578')
    'Semi-AnnualEnterpriseChannel2'         = [System.Version]::Parse('16.0.14931.20944')
}

##*===============================================
##* DETECTION
##*===============================================

# Get the VersionToReport value from the registry
$configuration = Get-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Office\ClickToRun\Configuration" 
$displayVersion = $null

# Try to parse the VersionToReport value as a System.Version object
if ( [System.Version]::TryParse($configuration.VersionToReport, $([ref]$displayVersion))) {

    # Display the version number that was detected
    Write-Output ("Discovered VersionToReport {0}" -f $displayVersion.ToString())

    # Find the minimum target version for the detected version's channel
    $targetVersion = $targetVersions.Values | Where-Object { $_.Build -eq $displayVersion.Build } | Select-Object -Unique -First 1
    
    # Display the minimum target version that was mapped
    Write-Output ("Mapped minimum target version to {0}" -f $targetVersion.ToString())

    # If the detected version is lower than the target version, trigger remediation and set the updatetargetversion registry value
    if ($displayVersion -lt $targetVersion) {
        Write-Output ("Current Office365 Version {0} is lower than specified target version {1}" -f $displayVersion.ToString(), $targetVersion.ToString())
        Write-Output "Triggering remediation..."
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\office\16.0\common\officeupdate" -Name "updatetargetversion" -Type "String" -Value $targetVersion -Force
        Exit 1
    }
    # If the detected Office version is equal to or higher than the target version, exit the script
    else {
        Write-Output ("Current Office365 Version {0} matches or is higher than specified target version {1}" -f $displayVersion.ToString(), $targetVersion.ToString())
        Exit 0
    }
}
# If VersionToReport cannot be parsed as a valid version, throw an error
else {
    throw "Unable to parse VersionToReport for Office"
}